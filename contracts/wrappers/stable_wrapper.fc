#include "../include/commons.fc";
#include "../include/constants.fc";
#include "../include/stdlib.fc";
#include "../pool/amm/curve_fi_stable.fc";
#include "../pool/include/jetton_based.fc";
#include "../pool/include/storage.fc";

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    return ();
}

(int) get_check_liquidity_addition_stable(cell input, cell amm_settings) method_id {
    storage::amm_settings = amm_settings;

    int index = 0;
    while (~ cell_null?(input)) {
        slice cs = input.begin_parse();
        storage::total_supply = cs~load_coins();
        storage::reserve1 = cs~load_coins();
        storage::reserve2 = cs~load_coins();
        int amount1 = cs~load_coins();
        int amount2 = cs~load_coins();
        int expected_lp_amount = cs~load_int(1);
        if (expected_lp_amount) {
            expected_lp_amount = cs~load_coins();
        } else {
            expected_lp_amount = -1;
        }
        (int excno, _, _, int lp_amount, _) = add_liquidity_impl(amount1, amount2);
        ifnot (excno == 0) {
            lp_amount = -1;
        }
        ifnot (expected_lp_amount == lp_amount) {
            return index;
        }
        index = index + 1;
        input = cs~load_maybe_ref();
    }
    return -1;
}

(int) get_check_liquidity_addition_stable2(cell input, cell amm_settings) method_id {
    storage::amm_settings = amm_settings;

    int index = 0;
    while (~ cell_null?(input)) {
        slice cs = input.begin_parse();
        cs~load_coins(); ;; skip total_supply
        int reserve1 = cs~load_coins();
        int reserve2 = cs~load_coins();
        int amount1 = cs~load_coins();
        int amount2 = cs~load_coins();
        int expected_lp_amount = cs~load_int(1);
        if (expected_lp_amount) {
            expected_lp_amount = cs~load_coins();
        } else {
            expected_lp_amount = -1;
        }

        storage::total_supply = 0;
        storage::reserve1 = 0;
        storage::reserve2 = 0;
        (int excno1, _, _, int lp_amount1, _) = add_liquidity_impl(reserve1, reserve2);
        ifnot (excno1 == 0) {
            return index;
        }
        storage::total_supply = lp_amount1;
        storage::reserve1 = reserve1;
        storage::reserve2 = reserve2;
        (int excno2, _, _, int lp_amount2, _) = add_liquidity_impl(amount1, amount2);
        ifnot (excno2 == 0) {
            lp_amount2 = -1;
        }
        ifnot (expected_lp_amount == lp_amount2) {
            return index;
        }
        index = index + 1;
        input = cs~load_maybe_ref();
    }
    return -1;
}

(int) get_check_swaps_stable(cell input, cell amm_settings) method_id {
    storage::amm_settings = amm_settings;

    int index = 0;
    while (~ cell_null?(input)) {
        slice cs = input.begin_parse();
        int input_amount = cs~load_coins();
        storage::reserve1 = cs~load_coins();
        storage::reserve2 = cs~load_coins();
        int direction = cs~load_uint(1);
        int expected_output_amount = cs~load_int(1);
        if (expected_output_amount) {
            expected_output_amount = cs~load_coins();
        } else {
            expected_output_amount = -1;
        }
        (int excno, int output_amount) = swap_impl(direction, input_amount, storage::reserve1, storage::reserve2);
        ifnot (excno == 0) {
            output_amount = -1;
        }
        ifnot (expected_output_amount == output_amount) {
            return index;
        }
        index = index + 1;
        input = cs~load_maybe_ref();
    }
    return -1;
}
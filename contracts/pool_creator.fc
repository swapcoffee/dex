#include "include/commons.fc";
#include "include/constants.fc";
#include "include/reservation.fc";
#include "include/stdlib.fc";

global cell storage::init_code_cell;
global cell storage::init_data_cell;
global slice storage::factory_address;
global slice storage::owner_address;
global slice storage::asset1;
global slice storage::asset2;
global int storage::amm;
global cell storage::amm_settings;
global int storage::amount1;
global int storage::amount2;

() load_data() impure inline {
    slice data_cs = get_data().begin_parse();
    storage::init_code_cell = data_cs~load_ref();
    storage::init_data_cell = data_cs~load_ref();
    (storage::factory_address, storage::owner_address, storage::asset1, storage::asset2, storage::amm, storage::amm_settings) = parse_owned_double_asset_init_data(storage::init_data_cell);
    storage::amount1 = data_cs~load_coins();
    storage::amount2 = data_cs~load_coins();
}

() update_data() impure inline {
    set_data(
        begin_cell()
            .store_ref(storage::init_code_cell)
            .store_ref(storage::init_data_cell)
            .store_coins(storage::amount1)
            .store_coins(storage::amount2)
            .end_cell()
    );
}

() continue(int query_id, cell creation_params) impure inline {
    send_builder(
        storage::factory_address,
        begin_cell()
            .store_uint(opcodes::create_pool_request, 32)
            .store_uint(query_id, 64)
            .store_coins(storage::amount1)
            .store_coins(storage::amount2)
            .store_ref(creation_params)
            .store_ref(storage::init_data_cell),
        SEND_MODE_SELF_DESTROY
    );
}

() payout(int query_id, slice asset, int amount, int mode) impure inline {
    send_hash_builder(
        calculate_vault_address_hash(
            storage::factory_address,
            storage::init_code_cell,
            asset
        ),
        0,
        begin_cell()
            .store_uint(opcodes::payout_internal, 32)
            .store_uint(query_id, 64)
            .store_slice(storage::owner_address)
            .store_coins(amount)
            .store_uint(0, 1)
            .store_uint(1, 1)
            .store_ref(storage::init_data_cell),
        mode
    );
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    cs~skip_bits(4);
    slice sender_address = cs~load_msg_addr();

    load_data();
    (int opcode, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));
    if (opcode == opcodes::create_pool_creator_internal) {
        throw_unless(errors::not_a_factory, equal_slice_bits(storage::factory_address, sender_address));
        slice asset = in_msg_body~load_asset();
        int amount = in_msg_body~load_coins();
        cell creation_params = in_msg_body~load_ref();

        if (equal_slice_bits(asset, storage::asset1)) {
            if (storage::amount1 == 0) {
                storage::amount1 = amount;
                if (storage::amount2 == 0) {
                    update_data();
                } else {
                    continue(query_id, creation_params);
                }
            } else {
                reserve_for_carry_inbound_without_value();
                payout(query_id, asset, amount, SEND_MODE_CARRY_ALL_BALANCE);
                commit();
                throw(errors::invalid_liquidity);
            }
        } elseif (equal_slice_bits(asset, storage::asset2)) {
            if (storage::amount2 == 0) {
                storage::amount2 = amount;
                if (storage::amount1 == 0) {
                    update_data();
                } else {
                    continue(query_id, creation_params);
                }
            } else {
                reserve_for_carry_inbound_without_value();
                payout(query_id, asset, amount, SEND_MODE_CARRY_ALL_BALANCE);
                commit();
                throw(errors::invalid_liquidity);
            }
        } else {
            throw(errors::invalid_request);
        }
    } elseif (opcode == opcodes::deploy) {
        throw_unless(errors::not_a_factory, equal_slice_bits(storage::factory_address, sender_address));
        in_msg_body~load_ref();
        in_msg_body~load_ref();
        cell action = in_msg_body~load_maybe_ref();
        recv_internal(in_msg_full, action.begin_parse());
    } elseif (opcode == opcodes::withdraw_deposit) {
        throw_unless(errors::wrong_sender, equal_slice_bits(storage::owner_address, sender_address));
        int amount = storage::amount1;
        slice asset = storage::asset1;
        if (amount == 0) {
            amount = storage::amount2;
            asset = storage::asset2;
        }
        payout(query_id, asset, amount, SEND_MODE_SELF_DESTROY);
    } elseif (opcode == opcodes::update_contract_internal) {
        throw_unless(errors::not_a_factory, equal_slice_bits(storage::factory_address, sender_address));
        reserve_for_carry_inbound_without_value();
        update_contract(query_id, in_msg_body~load_msg_addr(), in_msg_body);
    } else {
        throw(errors::unknown_opcode);
    }
    return ();
}
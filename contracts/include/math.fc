#include "stdlib.fc";

int mulmodpow2(int x, int y, int z) asm "MULMODPOW2";
(int, int) muladddivmod(int x, int y, int w, int z) asm "MULADDDIVMOD";
int mulrshiftr(int x, int y, int z) asm "MULRSHIFTR";
int ubitsize(int x) asm "UBITSIZE";

{-
    Compares a1/b1 with a2/b2. Returns:
    -1 if a1/b1 < a2/b2
     0 if a1/b1 = a2/b2
     1 if a1/b1 > a2/b2
-}
int compare_fractions(int a1, int b1, int a2, int b2) inline {
    (int au1, int bu1, int au2, int bu2) = (ubitsize(a1), ubitsize(b1), ubitsize(a2), ubitsize(b2));
    int du1 = au1 + bu2 - 256;
    int du2 = au2 + bu1 - 256;
    if ((du1 <= 0) & (du2 <= 0)) {
        return (a1 * b2) <=> (a2 * b1);
    }
    int dp = max(du1, du2);
    return mulrshiftr(a1, b2, dp) <=> mulrshiftr(a2, b1, dp);
}

int sub_abs(int x, int y) inline {
    return (x >= y) ? (x - y) : (y - x);
}

;; see explanation: https://github.com/PaulRBerg/prb-math/blob/main/src/Common.sol#L598
int sqrt(int x) inline {
    if (x == 0) {
        return x;
    }
    int r = 1;
    int xx = x;
    if (xx >= 0x100000000000000000000000000000000) {
        xx >>= 128;
        r <<= 64;
    }
    if (xx >= 0x10000000000000000) {
        xx >>= 64;
        r <<= 32;
    }
    if (xx >= 0x100000000) {
        xx >>= 32;
        r <<= 16;
    }
    if (xx >= 0x10000) {
        xx >>= 16;
        r <<= 8;
    }
    if (xx >= 0x100) {
        xx >>= 8;
        r <<= 4;
    }
    if (xx >= 0x10) {
        xx >>= 4;
        r <<= 2;
    }
    if (xx >= 0x8) {
        r <<= 1;
    }
    ;;r = (r * (xx + 65536)) >> 18;
    repeat (7) {
        r = (r + x / r) >> 1;
    }
    int r1 = x / r;
    return (r < r1 ? r : r1);
}
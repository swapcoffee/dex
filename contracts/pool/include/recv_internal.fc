() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_msg_flags();
    if (flags & 1) { ;; ignore bounced
        return ();
    }

    load_data();

    slice sender_address = cs~load_msg_addr();
    (int opcode, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));
    if (opcode == opcodes::swap_internal) {
        reserve_for_carry_inbound_without_value();
        swap_internal(sender_address, query_id, in_msg_body, true);
    } elseif (opcode == opcodes::deposit_liquidity_internal) {
        ;; reserves handled inside
        deposit_liquidity(sender_address, query_id, in_msg_body, false);
    } elseif (opcode == opcodes::burn_notification) {
        ;; allow even if not active
        force_chain(sender_address);
        ;; reserves handled inside
        withdraw_liquidity(sender_address, query_id, in_msg_body);
    } elseif (opcode == opcodes::update_pool_internal) {
        update_pool(sender_address, query_id, in_msg_body);
    } elseif (opcode == opcodes::deploy) {
        throw_unless(errors::not_a_factory, equal_slice_bits(storage::factory_address, sender_address));
        in_msg_body~load_ref();
        in_msg_body~load_ref();
        cell action = in_msg_body~load_maybe_ref();
        slice cs = action.begin_parse();
        cs~load_uint(32);
        cs~load_uint(64);
        deposit_liquidity(sender_address, query_id, cs, true);
    } elseif (opcode == opcodes::create_pool_internal) {
        throw_unless(errors::not_a_factory, equal_slice_bits(storage::factory_address, sender_address));
        deposit_liquidity(sender_address, query_id, in_msg_body, true);
    } elseif (opcode == opcodes::update_contract_internal) {
        throw_unless(errors::not_a_factory, equal_slice_bits(storage::factory_address, sender_address));
        update_contract(query_id, in_msg_body~load_msg_addr(), in_msg_body);
    } elseif (opcode == opcodes::provide_wallet_address) {
        slice owner_address = in_msg_body~load_msg_addr();
        force_chain(owner_address);
        int include_address? = in_msg_body~load_uint(1);
        int expected_hash = gen_lp_wallet_state_init_hash(owner_address, my_address(), storage::lp_wallet_code);
        slice wallet_address = construct_address(BASECHAIN, expected_hash);
        reserve_for_carry_inbound_without_value();
        send_builder(
            sender_address,
            begin_cell()
                .store_uint(opcodes::take_wallet_address, 32)
                .store_uint(query_id, 64)
                .store_slice(wallet_address)
                .store_maybe_ref(
                    include_address?
                    ? begin_cell().store_slice(owner_address).end_cell()
                    : null()
                ),
            SEND_MODE_CARRY_ALL_BALANCE
        );
    } else {
        throw(errors::unknown_opcode);
    }
    return ();
}
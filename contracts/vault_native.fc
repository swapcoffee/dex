#include "include/commons.fc";
#include "include/constants.fc";
#include "include/messages.fc";
#include "include/gas.fc";
#include "include/reservation.fc";
#include "include/stdlib.fc";

global cell storage::init_code_cell;
global cell storage::init_data_cell;
global slice storage::factory_address;

() load_data() impure inline {
    slice data_cs = get_data().begin_parse();
    storage::init_code_cell = data_cs~load_ref();
    cell init_data_cell = data_cs~load_ref();
    storage::init_data_cell = init_data_cell;
    (storage::factory_address, _) = parse_vault_init_data(init_data_cell);
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_msg_flags();
    if (flags & 1) { ;; ignore bounced
        return ();
    }

    load_data();

    slice sender_address = cs~load_msg_addr();
    force_chain(sender_address);
    cs~load_msg_addr(); ;; skip dst
    int msg_value = cs~load_coins();
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = get_original_fwd_fee(BASECHAIN, cs~load_coins());

    (int opcode, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));
    if (opcode == opcodes::payout_internal) {
        slice recipient = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        cell notification_data = in_msg_body~load_maybe_ref();
        slice notification_receiver = recipient;
        cell notification = null();
        int notification_fwd_gas = 0;

        ifnot (cell_null?(notification_data)) {
            slice s = notification_data.begin_parse();
            notification_receiver = s~load_msg_addr();
            notification = s~load_ref();
            notification_fwd_gas = s~load_coins();
        }

        verify_proof(storage::factory_address, storage::init_code_cell, sender_address, in_msg_body~load_maybe_ref());
        reserve_for_carry_inbound_with_value(amount);
        if (cell_null?(notification)) {
            send_builder(
                recipient,
                begin_cell()
                    .store_uint(opcodes::payout, 32)
                    .store_uint(query_id, 64),
                SEND_MODE_CARRY_ALL_BALANCE
            );
        } elseif (is_address_none(notification_receiver) | equal_slice_bits(recipient, notification_receiver)) {
            send_cell_carry_inbound(
                recipient,
                notification
            );
        } else {
            send_cell(
                notification_receiver,
                notification_fwd_gas,
                notification
            );
            send_builder(
                recipient,
                begin_cell()
                    .store_uint(opcodes::payout, 32)
                    .store_uint(query_id, 64),
                SEND_MODE_CARRY_ALL_BALANCE
            );
        }
    } elseif (opcode == opcodes::swap_native) {
        int amount = in_msg_body~load_coins();
        int ton_required_for_gas = get_compute_fee(BASECHAIN, gas::swap::computation) + fwd_fee * gas::swap::fwd_steps;
        throw_if(
            errors::not_enough_gas,
            (msg_value - amount <= ton_required_for_gas) | (amount == 0)
        );
        int pool_address_hash = in_msg_body~load_uint(256);
        int min_output_amount = in_msg_body~load_coins();
        cell next = in_msg_body~load_maybe_ref();
        cell params = in_msg_body~load_ref();

        reserve_for_carry_inbound_with_value(- amount);
        send_hash_builder(
            pool_address_hash,
            0,
            begin_cell()
                .store_uint(opcodes::swap_internal, 32)
                .store_uint(query_id, 64)
                .store_coins(amount)
                .store_uint(0, 1)
                .store_coins(min_output_amount)
                .store_maybe_ref(next)
                .store_ref(params)
                .store_ref(storage::init_data_cell),
            SEND_MODE_CARRY_ALL_BALANCE
        );
    } elseif (opcode == opcodes::deposit_liquidity_native) {
        int amount = in_msg_body~load_coins();
        int ton_left_for_gas = msg_value - amount;
        int ton_required_for_gas = get_compute_fee(BASECHAIN, gas::deposit_liquidity::computation) + fwd_fee * gas::deposit_liquidity::fwd_steps;
        throw_if(
            errors::not_enough_gas,
            ton_left_for_gas <= ton_required_for_gas
        );
        cell liquidity_params = in_msg_body~load_ref();
        cell pool_params = in_msg_body~load_ref();

        (_, (slice asset1, slice asset2, int amm, cell amm_settings)) = parse_pool_params(pool_params.begin_parse());
        throw_if(errors::same_assets, equal_slice_bits(asset1, asset2));
        (asset1, asset2, int sorted) = sort_assets(asset1, asset2);

        reserve_for_carry_inbound_with_value(- amount);
        send_builder(
            storage::factory_address,
            begin_cell()
                .store_uint(opcodes::create_liquidity_depository_request, 32)
                .store_uint(query_id, 64)
                .store_coins(amount)
                .store_ref(liquidity_params)
                .store_ref(
                    sorted ? begin_cell()
                        .store_slice(asset1)
                        .store_slice(asset2)
                        .store_uint(amm, 3)
                        .store_maybe_ref(amm_settings)
                        .end_cell() : pool_params
                )
                .store_slice(sender_address)
                .store_ref(storage::init_data_cell),
            SEND_MODE_CARRY_ALL_BALANCE
        );
    } elseif (opcode == opcodes::create_pool_native) {
        int amount = in_msg_body~load_coins();
        int ton_left_for_gas = msg_value - amount;
        int ton_required_for_gas = get_compute_fee(BASECHAIN, gas::create_pool::computation) + fwd_fee * gas::create_pool::fwd_steps + gas::create_pool::ton_reserves;
        throw_if(
            errors::not_enough_gas,
            ton_left_for_gas <= ton_required_for_gas
        );
        (slice asset1, slice asset2, int amm, cell amm_settings) = in_msg_body~parse_pool_params();
        throw_if(errors::same_assets, equal_slice_bits(asset1, asset2));
        (asset1, asset2, _) = sort_assets(asset1, asset2);
        slice recipient = in_msg_body~load_msg_addr();
        cell notification_data = in_msg_body~load_maybe_ref();
        int is_active = in_msg_body~load_uint(1);
        cell extra_settings = in_msg_body~load_maybe_ref();

        reserve_for_carry_inbound_with_value(- amount);
        send_cell_carry_inbound(
            storage::factory_address,
            begin_cell()
                .store_uint(opcodes::create_pool_creator_request, 32)
                .store_uint(query_id, 64)
                .store_coins(amount)
                .store_slice(asset1)
                .store_slice(asset2)
                .store_uint(amm, 3)
                .store_maybe_ref(amm_settings)
                .store_ref(
                    begin_cell()
                        .store_slice(recipient)
                        .store_maybe_ref(notification_data)
                        .store_uint(is_active, 1)
                        .store_maybe_ref(extra_settings)
                        .end_cell()
                )
                .store_slice(sender_address)
                .store_ref(storage::init_data_cell)
                .end_cell()
        );
    } elseif (opcode == opcodes::update_contract_internal) {
        throw_unless(errors::not_a_factory, equal_slice_bits(storage::factory_address, sender_address));
        reserve_for_carry_inbound_without_value();
        update_contract(query_id, in_msg_body~load_msg_addr(), in_msg_body);
    } else {
        throw(errors::unknown_opcode);
    }
    return ();
}

slice get_asset() method_id {
    return asset_native();
}

int is_active() method_id {
    return true;
}